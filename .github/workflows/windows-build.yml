name: Windows Release Build

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty to use Cargo.toml version)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      draft_release:
        description: 'Create as draft release'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Pre-build validation
  validate:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -m1 '^version' src-tauri/Cargo.toml | cut -d'"' -f2)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Display build info
        run: |
          echo "Building version: ${{ steps.get-version.outputs.version }}"
          echo "Create release: ${{ github.event.inputs.create_release }}"
          echo "Draft release: ${{ github.event.inputs.draft_release }}"

  # Windows release build
  build-windows:
    name: Build Windows Release
    needs: validate
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-release-v2-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-v2-

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Fast Pre-Build Validation (Check + Clippy)
        shell: pwsh
        run: |
          cd src-tauri
          Write-Host "‚ö° Running fast validation (check + clippy)..." -ForegroundColor Yellow

          # Combined check and clippy for faster validation
          Write-Host "üîç Step 1/2: Build check..." -ForegroundColor Cyan
          cargo check --release --target x86_64-pc-windows-msvc

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå BUILD CHECK FAILED" -ForegroundColor Red
            exit 1
          }

          Write-Host "‚úÖ Build check passed" -ForegroundColor Green
          Write-Host "üîç Step 2/2: Code quality check (clippy)..." -ForegroundColor Cyan

          # Clippy with warnings allowed (production-ready code)
          cargo clippy --release --lib -- -W clippy::all

          Write-Host "‚úÖ Pre-build validation complete" -ForegroundColor Green

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # No C++ build configuration needed - Pure Rust with Candle
          RUST_BACKTRACE: full
          CARGO_INCREMENTAL: 0
        with:
          tagName: v${{ needs.validate.outputs.version }}
          releaseName: 'BEAR AI v${{ needs.validate.outputs.version }}'
          releaseBody: |
            üêª BEAR AI Local LLM Assistant v${{ needs.validate.outputs.version }}

            **Download and run the installer for Windows:**
            - BEAR-AI_x64-setup.exe (Recommended - NSIS installer)
            - BEAR-AI_x64_en-US.msi (MSI installer)

            ## What's New in v${{ needs.validate.outputs.version }}
            ‚úÖ Fixed all clippy warnings for production build
            ‚úÖ Async mutex improvements for better concurrent performance
            ‚úÖ Complete GDPR & AI Act compliance framework
            ‚úÖ Enhanced security infrastructure with database encryption
            ‚úÖ Optimized dependency management

            ## Core Features
            ‚úÖ **100% Local** - No internet required, complete privacy
            ‚úÖ **PII Protection** - Built-in detection and redaction
            ‚úÖ **GPU/CPU Auto-detection** - Automatic hardware optimization
            ‚úÖ **HuggingFace Integration** - Download and run models locally
            ‚úÖ **Enterprise Compliance** - GDPR, AI Act, and data retention ready
            ‚úÖ **Document Processing** - Excel, Word, PowerPoint, PDF support
            ‚úÖ **Multi-platform** - Windows x64 support

            ## System Requirements
            - **OS:** Windows 10/11 (64-bit)
            - **RAM:** 8GB minimum (16GB+ recommended for larger models)
            - **Storage:** 10GB+ free space
            - **GPU:** Optional (NVIDIA/AMD for acceleration)

            ## Installation
            1. Download the installer
            2. Run as Administrator (recommended)
            3. Follow the installation wizard
            4. Launch BEAR AI from Start Menu

            ## First Run
            - The app will detect your hardware capabilities
            - Recommended models will be suggested based on your RAM
            - Download a model from HuggingFace to get started

            For support and documentation, visit our GitHub repository.

            ---
            Built with ‚ù§Ô∏è using Tauri and Rust
          releaseDraft: ${{ github.event.inputs.draft_release }}
          prerelease: false
          includeDebug: false
          includeRelease: true
          includeUpdaterJson: true
          args: --verbose

      - name: Verify and Upload Windows Installers
        shell: pwsh
        run: |
          Write-Host "üì¶ Verifying build artifacts..." -ForegroundColor Yellow

          $msi = Get-ChildItem -Path src-tauri/target/release/bundle/msi -Filter "*.msi" -ErrorAction SilentlyContinue
          $exe = Get-ChildItem -Path src-tauri/target/release/bundle/nsis -Filter "*.exe" -ErrorAction SilentlyContinue

          if (-not $msi) {
            Write-Error "‚ùå No MSI installer found!"
            exit 1
          }

          if (-not $exe) {
            Write-Error "‚ùå No EXE installer found!"
            exit 1
          }

          Write-Host "‚úÖ Found MSI: $($msi.Name) ($([math]::Round($msi.Length / 1MB, 2)) MB)" -ForegroundColor Green
          Write-Host "‚úÖ Found EXE: $($exe.Name) ($([math]::Round($exe.Length / 1MB, 2)) MB)" -ForegroundColor Green

      - name: Upload Windows Installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers-v${{ needs.validate.outputs.version }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          if-no-files-found: error
          retention-days: 30
