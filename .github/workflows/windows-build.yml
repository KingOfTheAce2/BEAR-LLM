name: Windows Release Build

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty to use Cargo.toml version)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      draft_release:
        description: 'Create as draft release'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Pre-build validation
  validate:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -m1 '^version' src-tauri/Cargo.toml | cut -d'"' -f2)
            if [ -z "$VERSION" ]; then
              echo "‚ùå Error: Could not extract version from Cargo.toml"
              exit 1
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Display build info
        run: |
          echo "üîß Building version: ${{ steps.get-version.outputs.version }}"
          echo "üì¶ Create release: ${{ github.event.inputs.create_release }}"
          echo "üìù Draft release: ${{ github.event.inputs.draft_release }}"

  # Windows release build
  build-windows:
    name: Build Windows Release
    needs: validate
    runs-on: windows-latest
    env:
      RUSTFLAGS: "-Ctarget-feature=-crt-static"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Security Audit
        working-directory: src-tauri
        run: cargo audit
        continue-on-error: true

      - name: Optimized Pre-Build Validation
        shell: pwsh
        run: |
          cd src-tauri
          Write-Host "‚ö° Running validation (clippy with all targets)..." -ForegroundColor Yellow

          # Clippy includes checking, so just run this with -D warnings
          cargo clippy --release --target x86_64-pc-windows-msvc --all-targets -- -D warnings

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå VALIDATION FAILED - Fix clippy warnings before release" -ForegroundColor Red
            exit 1
          }

          Write-Host "‚úÖ Pre-build validation complete" -ForegroundColor Green

      - name: Run Tests
        working-directory: src-tauri
        shell: pwsh
        run: |
          Write-Host "üß™ Running tests..." -ForegroundColor Yellow
          cargo test --release --target x86_64-pc-windows-msvc
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå TESTS FAILED" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "‚úÖ All tests passed" -ForegroundColor Green

      - name: Build Tauri application
        id: tauri-build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          RUST_BACKTRACE: full
        with:
          tagName: ${{ github.event.inputs.create_release == 'true' && format('v{0}', needs.validate.outputs.version) || '' }}
          releaseName: ${{ github.event.inputs.create_release == 'true' && format('BEAR AI v{0}', needs.validate.outputs.version) || '' }}
          releaseBody: |
            üêª BEAR AI Local LLM Assistant v${{ needs.validate.outputs.version }}

            **Download and run the installer for Windows:**
            - BEAR-AI_x64-setup.exe (Recommended - NSIS installer)
            - BEAR-AI_x64_en-US.msi (MSI installer)

            ## What's New in v${{ needs.validate.outputs.version }}
            ‚úÖ Streamlined CI/CD pipeline with optimized validation
            ‚úÖ Security audit integration for dependency scanning
            ‚úÖ Enhanced test coverage in release builds
            ‚úÖ Complete GDPR & AI Act compliance framework
            ‚úÖ Enhanced security infrastructure with database encryption

            ## Core Features
            ‚úÖ **100% Local** - No internet required, complete privacy
            ‚úÖ **PII Protection** - Built-in detection and redaction
            ‚úÖ **GPU/CPU Auto-detection** - Automatic hardware optimization
            ‚úÖ **HuggingFace Integration** - Download and run models locally
            ‚úÖ **Enterprise Compliance** - GDPR, AI Act, and data retention ready
            ‚úÖ **Document Processing** - Excel, Word, PowerPoint, PDF support
            ‚úÖ **Multi-platform** - Windows x64 support

            ## System Requirements
            - **OS:** Windows 10/11 (64-bit)
            - **RAM:** 8GB minimum (16GB+ recommended for larger models)
            - **Storage:** 10GB+ free space
            - **GPU:** Optional (NVIDIA/AMD for acceleration)

            ## Installation
            1. Download the installer
            2. Run as Administrator (recommended)
            3. Follow the installation wizard
            4. Launch BEAR AI from Start Menu

            ## First Run
            - The app will detect your hardware capabilities
            - Recommended models will be suggested based on your RAM
            - Download a model from HuggingFace to get started

            For support and documentation, visit our GitHub repository.

            ---
            Built with ‚ù§Ô∏è using Tauri and Rust
          releaseDraft: ${{ github.event.inputs.draft_release }}
          prerelease: false
          includeDebug: false
          includeRelease: true
          includeUpdaterJson: true
          args: --verbose

      - name: Verify Signatures
        if: env.TAURI_SIGNING_PRIVATE_KEY != ''
        shell: pwsh
        run: |
          Write-Host "üîê Verifying build signatures..." -ForegroundColor Yellow
          
          $sigFiles = Get-ChildItem -Path src-tauri/target/release/bundle -Recurse -Filter "*.sig" -ErrorAction SilentlyContinue
          
          if ($sigFiles.Count -eq 0) {
            Write-Host "‚ö†Ô∏è  No signature files found - signing may have failed" -ForegroundColor Yellow
          } else {
            Write-Host "‚úÖ Found $($sigFiles.Count) signature file(s):" -ForegroundColor Green
            $sigFiles | ForEach-Object {
              Write-Host "   - $($_.Name)" -ForegroundColor White
            }
          }

      - name: Debug - List all build artifacts
        if: always()
        shell: pwsh
        run: |
          Write-Host "üìÅ Listing all build artifacts..." -ForegroundColor Cyan
          Write-Host "`n=== MSI Files ===" -ForegroundColor Yellow
          Get-ChildItem -Path src-tauri/target -Recurse -Filter "*.msi" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  $($_.FullName) ($([math]::Round($_.Length / 1MB, 2)) MB)" -ForegroundColor White
          }
          Write-Host "`n=== EXE Files ===" -ForegroundColor Yellow
          Get-ChildItem -Path src-tauri/target -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  $($_.FullName) ($([math]::Round($_.Length / 1MB, 2)) MB)" -ForegroundColor White
          }
          Write-Host "`n=== Signature Files ===" -ForegroundColor Yellow
          Get-ChildItem -Path src-tauri/target -Recurse -Filter "*.sig" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  $($_.FullName)" -ForegroundColor White
          }
          Write-Host "`n=== Bundle Directory Structure ===" -ForegroundColor Yellow
          if (Test-Path "src-tauri/target/release/bundle") {
            Get-ChildItem -Path src-tauri/target/release/bundle -Recurse | ForEach-Object {
              Write-Host "  $($_.FullName)" -ForegroundColor White
            }
          } else {
            Write-Host "  ‚ö†Ô∏è  Bundle directory does not exist!" -ForegroundColor Red
          }

      - name: Verify build artifacts
        shell: pwsh
        run: |
          Write-Host "üì¶ Verifying build artifacts..." -ForegroundColor Yellow

          # Search for installers
          $msiFiles = Get-ChildItem -Path src-tauri/target -Recurse -Filter "*.msi" -ErrorAction SilentlyContinue
          $exeFiles = Get-ChildItem -Path src-tauri/target -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue | Where-Object { $_.Directory.Name -eq "nsis" }

          $failed = $false

          # Check MSI
          if ($msiFiles.Count -eq 0) {
            Write-Host "‚ùå No MSI files found" -ForegroundColor Red
            Write-Host "   Expected location: src-tauri/target/release/bundle/msi/" -ForegroundColor Yellow
            $failed = $true
          } else {
            $msi = $msiFiles | Select-Object -First 1
            Write-Host "‚úÖ Found MSI: $($msi.Name)" -ForegroundColor Green
            Write-Host "   Location: $($msi.DirectoryName)" -ForegroundColor Cyan
            Write-Host "   Size: $([math]::Round($msi.Length / 1MB, 2)) MB" -ForegroundColor Cyan
          }

          # Check EXE
          if ($exeFiles.Count -eq 0) {
            Write-Host "‚ùå No NSIS EXE files found" -ForegroundColor Red
            Write-Host "   Expected location: src-tauri/target/release/bundle/nsis/" -ForegroundColor Yellow
            $failed = $true
          } else {
            $exe = $exeFiles | Select-Object -First 1
            Write-Host "‚úÖ Found EXE: $($exe.Name)" -ForegroundColor Green
            Write-Host "   Location: $($exe.DirectoryName)" -ForegroundColor Cyan
            Write-Host "   Size: $([math]::Round($exe.Length / 1MB, 2)) MB" -ForegroundColor Cyan
          }

          if ($failed) {
            Write-Host "`n‚ùå Build verification failed - missing required artifacts" -ForegroundColor Red
            exit 1
          }

          Write-Host "`n‚úÖ All required artifacts verified successfully" -ForegroundColor Green

      - name: Upload Windows Installers
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers-v${{ needs.validate.outputs.version }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/**/*.sig
          if-no-files-found: error
          retention-days: 90

      - name: Build Summary
        if: always()
        shell: pwsh
        run: |
          Write-Host "`n========================================" -ForegroundColor Cyan
          Write-Host "         BUILD SUMMARY" -ForegroundColor Cyan
          Write-Host "========================================" -ForegroundColor Cyan
          Write-Host "Version: v${{ needs.validate.outputs.version }}" -ForegroundColor White
          Write-Host "Release Created: ${{ github.event.inputs.create_release }}" -ForegroundColor White
          Write-Host "Draft Mode: ${{ github.event.inputs.draft_release }}" -ForegroundColor White
          Write-Host "========================================`n" -ForegroundColor Cyan
